import { BehaviorSubject } from 'rxjs';
import { Direction } from '../interfaces/index';
import { Cache } from './cache';
import { Item } from './item';
import { Settings } from './settings';
import { Logger } from './logger';
export declare class Buffer {
    private _items;
    $items: BehaviorSubject<Array<Item>>;
    pristine: boolean;
    cache: Cache;
    minIndexUser: number;
    maxIndexUser: number;
    absMinIndex: number;
    absMaxIndex: number;
    private startIndex;
    readonly minBufferSize: number;
    readonly logger: Logger;
    constructor(settings: Settings, startIndex: number, logger: Logger);
    reset(reload?: boolean, startIndex?: number): void;
    items: Array<Item>;
    readonly size: number;
    readonly averageSize: number;
    readonly hasItemSize: boolean;
    readonly minIndex: number;
    readonly maxIndex: number;
    readonly bof: boolean;
    readonly eof: boolean;
    get($index: number): Item | undefined;
    setItems(items: Array<Item>): boolean;
    getFirstVisibleItemIndex(): number;
    getLastVisibleItemIndex(): number;
    getFirstVisibleItem(): Item | undefined;
    getLastVisibleItem(): Item | undefined;
    getEdgeVisibleItem(direction: Direction, opposite?: boolean): Item | undefined;
    getVisibleItemsCount(): number;
    getSizeByIndex(index: number): number;
    checkAverageSize(): void;
}
