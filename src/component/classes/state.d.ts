import { BehaviorSubject } from 'rxjs';
import { State as IState, ProcessRun, ItemAdapter, ScrollState as IScrollState, SyntheticScroll as ISyntheticScroll } from '../interfaces/index';
import { FetchModel } from './fetch';
import { Settings } from './settings';
import { Logger } from './logger';
export declare class State implements IState {
    protected settings: Settings;
    protected logger: Logger;
    initTime: number;
    innerLoopCount: number;
    isInitialLoop: boolean;
    workflowCycleCount: number;
    isInitialWorkflowCycle: boolean;
    countDone: number;
    startIndex: number;
    fetch: FetchModel;
    clip: boolean;
    clipCall: number;
    lastPosition: number;
    preFetchPosition: number;
    preAdjustPosition: number;
    sizeBeforeRender: number;
    fwdPaddingBeforeRender: number;
    bwdPaddingAverageSizeItemsCount: number;
    scrollState: IScrollState;
    syntheticScroll: ISyntheticScroll;
    loopPendingSource: BehaviorSubject<boolean>;
    workflowPendingSource: BehaviorSubject<boolean>;
    isLoadingSource: BehaviorSubject<boolean>;
    firstVisibleSource: BehaviorSubject<ItemAdapter>;
    lastVisibleSource: BehaviorSubject<ItemAdapter>;
    firstVisibleWanted: boolean;
    lastVisibleWanted: boolean;
    loopPending: boolean;
    workflowPending: boolean;
    isLoading: boolean;
    firstVisibleItem: ItemAdapter;
    lastVisibleItem: ItemAdapter;
    readonly time: number;
    constructor(settings: Settings, logger: Logger);
    startLoop(options?: ProcessRun): void;
    endLoop(): void;
    setCurrentStartIndex(newStartIndex: any): void;
}
