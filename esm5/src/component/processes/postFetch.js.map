{"version":3,"file":"postFetch.js","sourceRoot":"","sources":["../../../../src/component/processes/postFetch.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scroller } from '../scroller';\nimport { Item } from '../classes/item';\nimport { Process, ProcessStatus } from '../interfaces/index';\n\nexport default class PostFetch {\n\n  static run(scroller: Scroller) {\n    if (PostFetch.setItems(scroller)) {\n      PostFetch.setBufferLimits(scroller);\n      scroller.callWorkflow({\n        process: Process.postFetch,\n        status: scroller.state.fetch.hasNewItems ? ProcessStatus.next : ProcessStatus.done\n      });\n    } else {\n      scroller.callWorkflow({\n        process: Process.postFetch,\n        status: ProcessStatus.error,\n        payload: { error: 'Can\\'t set buffer items' }\n      });\n    }\n  }\n\n  static setBufferLimits(scroller: Scroller) {\n    const { buffer, state: { fetch: { firstIndex, lastIndex, items } } } = scroller;\n    if (!items.length) {\n      if (<number>lastIndex < buffer.minIndex) {\n        buffer.absMinIndex = buffer.minIndex;\n      }\n      if (<number>firstIndex > buffer.maxIndex) {\n        buffer.absMaxIndex = buffer.maxIndex;\n      }\n    } else {\n      const last = items.length - 1;\n      if (<number>firstIndex < items[0].$index) {\n        buffer.absMinIndex = items[0].$index;\n      }\n      if (<number>lastIndex > items[last].$index) {\n        buffer.absMaxIndex = items[last].$index;\n      }\n    }\n  }\n\n  static setItems(scroller: Scroller): boolean {\n    const { buffer, state: { fetch } } = scroller;\n    const items = fetch.newItemsData;\n    if (!items || !items.length) { // empty result\n      return true;\n    }\n    // eof/bof case, need to shift fetch index if bof\n    let fetchIndex = <number>fetch.index;\n    if (items.length < fetch.count) {\n      if (scroller.state.isInitialLoop) {\n        // let's treat initial poor fetch as startIndex-bof\n        fetchIndex = scroller.state.startIndex;\n      } else if (<number>fetch.firstIndex < buffer.minIndex) { // normal bof\n        fetchIndex = buffer.minIndex - items.length;\n      }\n    }\n    fetch.items = items.map((item, index: number) =>\n      new Item(fetchIndex + index, item, scroller.routines)\n    );\n    fetch.isPrepend = !!buffer.items.length && buffer.items[0].$index > fetch.items[fetch.items.length - 1].$index;\n    return buffer.setItems(fetch.items);\n  }\n\n}\n"]}