{"version":3,"file":"fetch.js","sourceRoot":"","sources":["../../../package/src/component/processes/fetch.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,UAAU,EAAY,MAAM,MAAM,CAAC;AAG5C,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAE7D,MAAM,CAAC,OAAO,OAAO,KAAK;;;;;IAExB,MAAM,CAAC,GAAG,CAAC,QAAkB;;cACrB,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC;QAClC,IAAI,OAAO,MAAM,CAAC,SAAS,KAAK,UAAU,EAAE;YAC1C,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;gBACnB,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;aACtC;iBAAM;gBACL,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;aACpC;SACF;aAAM;YACL,QAAQ,CAAC,sBAAsB,CAAC,IAAI,CAClC,MAAM,CAAC,SAAS,CACd,CAAC,IAAgB,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,EACnD,CAAC,KAAU,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAC5C,CACF,CAAC;SACH;IACH,CAAC;;;;;;IAED,MAAM,CAAC,OAAO,CAAC,IAAgB,EAAE,QAAkB;QACjD,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,YAAY,IAAI,CAAC,MAAM,SAAS;YACxD,YAAY,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,aAAa,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;QACpF,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC;QAEzC,QAAQ,CAAC,YAAY,CAAC;YACpB,OAAO,EAAE,OAAO,CAAC,KAAK;YACtB,MAAM,EAAE,aAAa,CAAC,IAAI;SAC3B,CAAC,CAAC;IACL,CAAC;;;;;;IAED,MAAM,CAAC,IAAI,CAAC,KAAa,EAAE,QAAkB;QAC3C,QAAQ,CAAC,YAAY,CAAC;YACpB,OAAO,EAAE,OAAO,CAAC,KAAK;YACtB,MAAM,EAAE,aAAa,CAAC,KAAK;YAC3B,OAAO,EAAE,EAAE,KAAK,EAAE;SACnB,CAAC,CAAC;IACL,CAAC;;;;;IAED,MAAM,CAAC,GAAG,CAAC,QAAkB;;cACrB,IAAI,GAAG,mBAAU,QAAQ,CAAC,UAAU,CAAC,GAAG,EAAA;;YAE1C,aAAa;;YAAE,cAAc;;YAC7B,QAAuB;;cACrB,OAAO,GAAG,CAAC,IAAS,EAAE,EAAE;YAC5B,IAAI,CAAC,QAAQ,EAAE;gBACb,aAAa,GAAG,IAAI,IAAI,IAAI,CAAC;gBAC7B,OAAO;aACR;YACD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACtB,CAAC;;cACK,MAAM,GAAG,CAAC,KAAU,EAAE,EAAE;YAC5B,IAAI,CAAC,QAAQ,EAAE;gBACb,cAAc,GAAG,KAAK,IAAI,IAAI,CAAC;gBAC/B,OAAO;aACR;YACD,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACxB,CAAC;;cAEK,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC;QAC5F,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE,EAAE,uBAAuB;YACxE,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SAC9B;aAAM,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,SAAS,KAAK,UAAU,EAAE,EAAE,0BAA0B;YACvF,OAAO,MAAM,CAAC,CAAC,yBAAyB;SACzC;QAED,IAAI,aAAa,KAAK,SAAS,IAAI,cAAc,KAAK,SAAS,EAAE;YAC/D,OAAO;gBACL,IAAI,EAAE,aAAa;gBACnB,KAAK,EAAE,cAAc;gBACrB,OAAO,EAAE,cAAc,KAAK,SAAS;aACtC,CAAC;SACH;QAED,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC,SAAwB,EAAE,EAAE;YACpD,QAAQ,GAAG,SAAS,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;CAEF","sourcesContent":["import { Observable, Observer } from 'rxjs';\n\nimport { Scroller } from '../scroller';\nimport { Process, ProcessStatus } from '../interfaces/index';\n\nexport default class Fetch {\n\n  static run(scroller: Scroller) {\n    const result = Fetch.get(scroller);\n    if (typeof result.subscribe !== 'function') {\n      if (!result.isError) {\n        Fetch.success(result.data, scroller);\n      } else {\n        Fetch.fail(result.error, scroller);\n      }\n    } else {\n      scroller.innerLoopSubscriptions.push(\n        result.subscribe(\n          (data: Array<any>) => Fetch.success(data, scroller),\n          (error: any) => Fetch.fail(error, scroller)\n        )\n      );\n    }\n  }\n\n  static success(data: Array<any>, scroller: Scroller) {\n    scroller.logger.log(() => `resolved ${data.length} items ` +\n      `(index = ${scroller.state.fetch.index}, count = ${scroller.state.fetch.count})`);\n    scroller.state.fetch.newItemsData = data;\n\n    scroller.callWorkflow({\n      process: Process.fetch,\n      status: ProcessStatus.next\n    });\n  }\n\n  static fail(error: string, scroller: Scroller) {\n    scroller.callWorkflow({\n      process: Process.fetch,\n      status: ProcessStatus.error,\n      payload: { error }\n    });\n  }\n\n  static get(scroller: Scroller) {\n    const _get = <Function>scroller.datasource.get;\n\n    let immediateData, immediateError;\n    let observer: Observer<any>;\n    const success = (data: any) => {\n      if (!observer) {\n        immediateData = data || null;\n        return;\n      }\n      observer.next(data);\n      observer.complete();\n    };\n    const reject = (error: any) => {\n      if (!observer) {\n        immediateError = error || null;\n        return;\n      }\n      observer.error(error);\n    };\n\n    const result = _get(scroller.state.fetch.index, scroller.state.fetch.count, success, reject);\n    if (result && typeof result.then === 'function') { // DatasourceGetPromise\n      result.then(success, reject);\n    } else if (result && typeof result.subscribe === 'function') { // DatasourceGetObservable\n      return result; // do not wrap observable\n    }\n\n    if (immediateData !== undefined || immediateError !== undefined) {\n      return {\n        data: immediateData,\n        error: immediateError,\n        isError: immediateError !== undefined\n      };\n    }\n\n    return Observable.create((_observer: Observer<any>) => {\n      observer = _observer;\n    });\n  }\n\n}\n"]}