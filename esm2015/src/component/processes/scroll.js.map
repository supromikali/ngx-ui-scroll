{"version":3,"file":"scroll.js","sourceRoot":"","sources":["../../../package/src/component/processes/scroll.ts"],"names":[],"mappings":";;;;AACA,OAAO,EAAE,OAAO,EAAE,aAAa,EAAiB,MAAM,qBAAqB,CAAC;AAE5E,MAAM,CAAC,OAAO,OAAO,MAAM;;;;;;IAEzB,MAAM,CAAC,GAAG,CAAC,QAAkB,EAAE,UAAyB,EAAE;QACxD,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QACtD,IAAI,QAAQ,CAAC,KAAK,CAAC,eAAe,CAAC,QAAQ,KAAK,IAAI,EAAE;YACpD,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,QAAQ,CAAC,EAAE;gBAC5C,OAAO;aACR;SACF;QACD,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;;;;;IAED,MAAM,CAAC,sBAAsB,CAAC,QAAkB;cACxC,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,eAAe,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,QAAQ;;cACrE,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;;cACzB,SAAS,qBAAQ,eAAe,CAAE;;cAClC,QAAQ,GAAG,QAAQ,CAAC,cAAc;;cAClC,gBAAgB,GAAG,IAAI,GAAG,SAAS,CAAC,IAAI;QAE9C,IAAI,gBAAgB,GAAG,QAAQ,CAAC,mBAAmB,EAAE;YACnD,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,kCAAkC,gBAAgB,MAAM,QAAQ,CAAC,mBAAmB,GAAG,CAAC,CAAC;YAC1G,eAAe,CAAC,KAAK,EAAE,CAAC;YACxB,OAAO,QAAQ,KAAK,SAAS,CAAC,QAAQ,CAAC;SACxC;QAED,mBAAmB;QACnB,eAAe,CAAC,YAAY,GAAG,IAAI,CAAC;QACpC,IAAI,QAAQ,KAAK,SAAS,CAAC,QAAQ,EAAE;YACnC,uDAAuD;YACvD,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,0BAA0B,QAAQ,GAAG,CAAC,CAAC;YACxD,OAAO,KAAK,CAAC;SACd;aAAM,IAAI,SAAS,CAAC,YAAY,EAAE;YACjC,eAAe,CAAC,QAAQ,GAAG,IAAI,CAAC;YAChC,eAAe,CAAC,cAAc,GAAG,IAAI,CAAC;YACtC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,+BAA+B,CAAC,CAAC;SACnD;QACD,IAAI,QAAQ,CAAC,cAAc,EAAE;YAC3B,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE;gBAC3B,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,wCAAwC,CAAC,CAAC;gBAC3D,eAAe,CAAC,KAAK,EAAE,CAAC;aACzB;YACD,OAAO,IAAI,CAAC;SACb;QAED,uCAAuC;QACvC,IAAI,QAAQ,KAAK,SAAS,CAAC,QAAQ,EAAE;;kBAC7B,YAAY,GAAG,mBAAQ,SAAS,CAAC,cAAc,EAAA,GAAG,QAAQ;;kBAC1D,cAAc,GAAG,mBAAQ,SAAS,CAAC,QAAQ,EAAA,GAAG,QAAQ;YAC5D,IAAI,YAAY,GAAG,CAAC,IAAI,YAAY,GAAG,cAAc,EAAE;;sBAC/C,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,GAAG,eAAe,CAAC,KAAK,CAAC;gBACjE,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,2BAA2B;oBAC1C,cAAc,GAAG,QAAQ;oBACzB,wBAAwB,GAAG,SAAS,CAAC,QAAQ;oBAC7C,+BAA+B,GAAG,SAAS,CAAC,cAAc;oBAC1D,qBAAqB,GAAG,gBAAgB;oBACxC,qBAAqB,GAAG,cAAc;oBACtC,mBAAmB,GAAG,YAAY;oBAClC,kBAAkB,GAAG,WAAW,CAAC,CAAC;gBACpC,IAAI,QAAQ,CAAC,OAAO,EAAE,EAAE,2BAA2B;oBACjD,IAAI,YAAY,IAAI,QAAQ,CAAC,kBAAkB,IAAI,gBAAgB,IAAI,QAAQ,CAAC,kBAAkB,EAAE;wBAClG,QAAQ,CAAC,cAAc,GAAG,WAAW,CAAC;qBACvC;iBACF;qBAAM;oBACL,QAAQ,CAAC,cAAc,GAAG,WAAW,CAAC;iBACvC;aACF,CAAC;;;;;;gBAME;SACL;QACD,OAAO,IAAI,CAAC;IACd,CAAC;;;;;;IAED,MAAM,CAAC,WAAW,CAAC,QAAkB,EAAE,OAAsB;QAC3D,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,IAAI,OAAO,CAAC,OAAO,EAAE;YAClD,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAC1B,OAAO;SACR;cACK,EAAE,KAAK,EAAE,EAAE,WAAW,EAAE,EAAE,GAAG,QAAQ;;cACrC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;;cACzB,KAAK,GAAG,WAAW,CAAC,cAAc,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI;;cACtE,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,GAAG,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC,WAAW,CAAC,eAAe,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;cAC3G,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC;QACnC,wEAAwE;QACxE,IAAI,IAAI,IAAI,CAAC,EAAE;YACb,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YACjC,WAAW,CAAC,cAAc,GAAG,IAAI,CAAC;YAClC,WAAW,CAAC,eAAe,GAAG,CAAC,CAAC;YAChC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;SAC3B;aAAM,IAAI,CAAC,WAAW,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE;YAC9D,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,wBAAwB,QAAQ,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,EAAE,CAAC,CAAC;YAChF,WAAW,CAAC,eAAe,GAAG,IAAI,CAAC;YACnC,WAAW,CAAC,WAAW,GAAG,mBAAK,UAAU,CAAC,GAAG,EAAE;gBAC7C,WAAW,CAAC,WAAW,GAAG,IAAI,CAAC;gBAC/B,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,mBAAmB,QAAQ,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;gBACrE,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;YAC1C,CAAC,EAAE,IAAI,CAAC,EAAA,CAAC;SACV,CAAC;;YAEE;IACN,CAAC;;;;;IAED,MAAM,CAAC,QAAQ,CAAC,QAAkB;cAC1B,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,WAAW,EAAE,EAAE,GAAG,QAAQ;QAClD,IAAI,KAAK,CAAC,eAAe,EAAE;YACzB,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CACvB,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;gBACxB,uEAAuE;gBACvE,iBAAiB,EAAE,iBAAiB;aACrC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YACjB,WAAW,CAAC,UAAU,GAAG,IAAI,CAAC;YAC9B,OAAO;SACR;QACD,QAAQ,CAAC,YAAY,CAAC;YACpB,OAAO,EAAE,OAAO,CAAC,MAAM;YACvB,MAAM,EAAE,aAAa,CAAC,IAAI;YAC1B,OAAO,kBACL,MAAM,EAAE,IAAI,IACT,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAC1E;SACF,CAAC,CAAC;IACL,CAAC;CAEF","sourcesContent":["import { Scroller } from '../scroller';\nimport { Process, ProcessStatus, ScrollPayload } from '../interfaces/index';\n\nexport default class Scroll {\n\n  static run(scroller: Scroller, payload: ScrollPayload = {}) {\n    scroller.logger.log(scroller.viewport.scrollPosition);\n    if (scroller.state.syntheticScroll.position !== null) {\n      if (!Scroll.processSyntheticScroll(scroller)) {\n        return;\n      }\n    }\n    this.delayScroll(scroller, payload);\n  }\n\n  static processSyntheticScroll(scroller: Scroller): boolean {\n    const { viewport, state: { syntheticScroll }, settings, logger } = scroller;\n    const time = Number(new Date());\n    const synthetic = { ...syntheticScroll };\n    const position = viewport.scrollPosition;\n    const synthScrollDelay = time - synthetic.time;\n\n    if (synthScrollDelay > settings.maxSynthScrollDelay) {\n      logger.log(() => `reset synthetic scroll params (${synthScrollDelay} > ${settings.maxSynthScrollDelay})`);\n      syntheticScroll.reset();\n      return position !== synthetic.position;\n    }\n\n    // synthetic scroll\n    syntheticScroll.readyToReset = true;\n    if (position === synthetic.position) {\n      // let's reset syntheticScroll.position on first change\n      logger.log(() => `skip synthetic scroll (${position})`);\n      return false;\n    } else if (synthetic.readyToReset) {\n      syntheticScroll.position = null;\n      syntheticScroll.positionBefore = null;\n      logger.log(() => 'reset synthetic scroll params');\n    }\n    if (settings.windowViewport) {\n      if (!synthetic.readyToReset) {\n        logger.log(() => 'reset synthetic scroll params (window)');\n        syntheticScroll.reset();\n      }\n      return true;\n    }\n\n    // inertia scroll over synthetic scroll\n    if (position !== synthetic.position) {\n      const inertiaDelta = <number>synthetic.positionBefore - position;\n      const syntheticDelta = <number>synthetic.position - position;\n      if (inertiaDelta > 0 && inertiaDelta < syntheticDelta) {\n        const newPosition = Math.max(0, position + syntheticScroll.delta);\n        logger.log(() => 'inertia scroll adjustment' +\n          '. Position: ' + position +\n          ', synthetic position: ' + synthetic.position +\n          ', synthetic position before: ' + synthetic.positionBefore +\n          ', synthetic delay: ' + synthScrollDelay +\n          ', synthetic delta: ' + syntheticDelta +\n          ', inertia delta: ' + inertiaDelta +\n          ', new position: ' + newPosition);\n        if (settings.inertia) { // precise inertia settings\n          if (inertiaDelta <= settings.inertiaScrollDelta && synthScrollDelay <= settings.inertiaScrollDelay) {\n            viewport.scrollPosition = newPosition;\n          }\n        } else {\n          viewport.scrollPosition = newPosition;\n        }\n      } /* else {\n        logger.log(() => 'inertia scroll adjustment [cancelled]' +\n          '. Position: ' + position +\n          ', synthetic position: ' + synthetic.position +\n          ', synthetic position before: ' + synthetic.positionBefore +\n          ', synthetic delta: ' + syntheticDelta + ', inertia delta: ' + inertiaDelta);\n      } */\n    }\n    return true;\n  }\n\n  static delayScroll(scroller: Scroller, payload: ScrollPayload) {\n    if (!scroller.settings.throttle || payload.byTimer) {\n      Scroll.doScroll(scroller);\n      return;\n    }\n    const { state: { scrollState } } = scroller;\n    const time = Number(Date.now());\n    const tDiff = scrollState.lastScrollTime + scroller.settings.throttle - time;\n    const dDiff = scroller.settings.throttle + (scrollState.firstScrollTime ? scrollState.firstScrollTime - time : 0);\n    const diff = Math.max(tDiff, dDiff);\n    // scroller.logger.log('tDiff:', tDiff, 'dDiff:', dDiff, 'diff:', diff);\n    if (diff <= 0) {\n      scroller.purgeScrollTimers(true);\n      scrollState.lastScrollTime = time;\n      scrollState.firstScrollTime = 0;\n      Scroll.doScroll(scroller);\n    } else if (!scrollState.scrollTimer && !scrollState.keepScroll) {\n      scroller.logger.log(() => `setting the timer at ${scroller.state.time + diff}`);\n      scrollState.firstScrollTime = time;\n      scrollState.scrollTimer = <any>setTimeout(() => {\n        scrollState.scrollTimer = null;\n        scroller.logger.log(() => `fire the timer (${scroller.state.time})`);\n        Scroll.run(scroller, { byTimer: true });\n      }, diff);\n    } /* else {\n      scroller.logger.log('MISS TIMER');\n    } */\n  }\n\n  static doScroll(scroller: Scroller) {\n    const { state, state: { scrollState } } = scroller;\n    if (state.workflowPending) {\n      scroller.logger.log(() =>\n        !scrollState.keepScroll ? [\n          `setting %ckeepScroll%c flag (scrolling while the Workflow is pending)`,\n          'color: #006600;', 'color: #000000;'\n        ] : undefined);\n      scrollState.keepScroll = true;\n      return;\n    }\n    scroller.callWorkflow({\n      process: Process.scroll,\n      status: ProcessStatus.next,\n      payload: {\n        scroll: true,\n        ...(scrollState.keepScroll ? { keepScroll: scrollState.keepScroll } : {})\n      }\n    });\n  }\n\n}\n"]}