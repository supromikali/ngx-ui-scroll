{"version":3,"file":"adjust.js","sourceRoot":"","sources":["../../../package/src/component/processes/adjust.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scroller } from '../scroller';\r\nimport { Direction, Process, ProcessStatus } from '../interfaces/index';\r\n\r\nexport default class Adjust {\r\n\r\n  static MAX_SCROLL_ADJUSTMENTS_COUNT = 10;\r\n\r\n  static run(scroller: Scroller) {\r\n    scroller.state.preAdjustPosition = scroller.viewport.scrollPosition;\r\n\r\n    // padding-elements adjustments\r\n    const setPaddingsResult =\r\n      Adjust.setPaddings(scroller);\r\n\r\n    if (setPaddingsResult === false) {\r\n      scroller.callWorkflow({\r\n        process: Process.adjust,\r\n        status: ProcessStatus.error,\r\n        payload: { error: 'Can\\'t get visible item' }\r\n      });\r\n      return;\r\n    }\r\n\r\n    // scroll position adjustments\r\n    Adjust.fixScrollPosition(scroller, <number>setPaddingsResult);\r\n\r\n    scroller.callWorkflow({\r\n      process: Process.adjust,\r\n      status: ProcessStatus.done\r\n    });\r\n  }\r\n\r\n  static setPaddings(scroller: Scroller): boolean | number {\r\n    const { viewport, buffer, state: { fetch } } = scroller;\r\n    const firstItem = buffer.getFirstVisibleItem();\r\n    const lastItem = buffer.getLastVisibleItem();\r\n    if (!firstItem || !lastItem) {\r\n      return false;\r\n    }\r\n    const forwardPadding = viewport.paddings.forward;\r\n    const backwardPadding = viewport.paddings.backward;\r\n    const firstIndex = firstItem.$index;\r\n    const lastIndex = lastItem.$index;\r\n    const minIndex = isFinite(buffer.absMinIndex) ? buffer.absMinIndex : buffer.minIndex;\r\n    const maxIndex = isFinite(buffer.absMaxIndex) ? buffer.absMaxIndex : buffer.maxIndex;\r\n    const hasAverageItemSizeChanged = buffer.averageSize !== fetch.averageItemSize;\r\n    let index, bwdSize = 0, fwdSize = 0, bwdPaddingAverageSizeItemsCount = 0;\r\n\r\n    // new backward padding\r\n    for (index = minIndex; index < firstIndex; index++) {\r\n      const item = buffer.cache.get(index);\r\n      bwdSize += item ? item.size : buffer.cache.averageSize;\r\n      if (hasAverageItemSizeChanged) {\r\n        bwdPaddingAverageSizeItemsCount += !item ? 1 : 0;\r\n      }\r\n    }\r\n    if (hasAverageItemSizeChanged) {\r\n      for (index = firstIndex; index < <number>fetch.firstIndexBuffer; index++) {\r\n        bwdPaddingAverageSizeItemsCount += !buffer.cache.get(index) ? 1 : 0;\r\n      }\r\n    }\r\n\r\n    // new forward padding\r\n    for (index = lastIndex + 1; index <= maxIndex; index++) {\r\n      const item = buffer.cache.get(index);\r\n      fwdSize += item ? item.size : buffer.cache.averageSize;\r\n    }\r\n    const fwdPaddingDiff = forwardPadding.size - fwdSize;\r\n    const viewportSizeDiff = viewport.getSize() - viewport.getScrollableSize() + fwdPaddingDiff;\r\n    if (viewportSizeDiff > 0) {\r\n      fwdSize += viewportSizeDiff;\r\n      scroller.logger.log(`forward padding will be increased by ${viewportSizeDiff} to fill the viewport`);\r\n    }\r\n\r\n    forwardPadding.size = fwdSize;\r\n    backwardPadding.size = bwdSize;\r\n\r\n    scroller.logger.stat('after paddings adjustments');\r\n    return bwdPaddingAverageSizeItemsCount;\r\n  }\r\n\r\n  static fixScrollPosition(scroller: Scroller, bwdPaddingAverageSizeItemsCount: number) {\r\n    const { viewport, buffer, state, state: { fetch, fetch: { items, negativeSize } } } = scroller;\r\n\r\n    if (scroller.settings.windowViewport) {\r\n      const newPosition = viewport.scrollPosition;\r\n      const posDiff = state.preAdjustPosition - newPosition;\r\n      if (posDiff) {\r\n        const winState = state.scrollState.window;\r\n        if (newPosition === winState.positionToUpdate) {\r\n          winState.reset();\r\n          state.syntheticScroll.readyToReset = false;\r\n          scroller.logger.log(() => `process window scroll preventive: sum(${newPosition}, ${posDiff})`);\r\n          Adjust.setScroll(scroller, posDiff);\r\n          scroller.logger.stat('after scroll position adjustment (window)');\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    // if backward padding has been changed due to average item size change\r\n    const hasAverageItemSizeChanged = buffer.averageSize !== fetch.averageItemSize;\r\n    const bwdAverageItemsCountDiff = state.bwdPaddingAverageSizeItemsCount - bwdPaddingAverageSizeItemsCount;\r\n    const hasBwdParamsChanged = bwdPaddingAverageSizeItemsCount > 0 || bwdAverageItemsCountDiff > 0;\r\n    if (hasAverageItemSizeChanged && hasBwdParamsChanged) {\r\n      const _bwdPaddingAverageSize = bwdPaddingAverageSizeItemsCount * buffer.averageSize;\r\n      const bwdPaddingAverageSize = bwdPaddingAverageSizeItemsCount * fetch.averageItemSize;\r\n      const bwdPaddingAverageSizeDiff = _bwdPaddingAverageSize - bwdPaddingAverageSize;\r\n      const bwdAverageItemsSizeDiff = bwdAverageItemsCountDiff * fetch.averageItemSize;\r\n      const positionDiff = bwdPaddingAverageSizeDiff - bwdAverageItemsSizeDiff;\r\n      if (positionDiff) {\r\n        Adjust.setScroll(scroller, positionDiff);\r\n        scroller.logger.stat('after scroll position adjustment (average)');\r\n      }\r\n      state.bwdPaddingAverageSizeItemsCount = bwdPaddingAverageSizeItemsCount;\r\n    }\r\n\r\n    // if scrollable area size padding forward size have not been changed during this cycle\r\n    if (state.sizeBeforeRender === viewport.getScrollableSize() &&\r\n      viewport.paddings.forward.size === state.fwdPaddingBeforeRender) {\r\n      return;\r\n    }\r\n    // no negative area items\r\n    if (items[0].$index >= fetch.minIndex) {\r\n      return;\r\n    }\r\n\r\n    if (negativeSize > 0) {\r\n      Adjust.setScroll(scroller, negativeSize);\r\n    } else if (negativeSize < 0) {\r\n      viewport.paddings.forward.size -= negativeSize;\r\n      viewport.scrollPosition -= negativeSize;\r\n    }\r\n    scroller.logger.stat('after scroll position adjustment (negative)');\r\n  }\r\n\r\n  static setScroll(scroller: Scroller, delta: number) {\r\n    const { viewport } = scroller;\r\n    const forwardPadding = viewport.paddings[Direction.forward];\r\n    const oldPosition = viewport.scrollPosition;\r\n    const newPosition = Math.round(oldPosition + delta);\r\n    for (let i = 0; i < Adjust.MAX_SCROLL_ADJUSTMENTS_COUNT; i++) {\r\n      viewport.scrollPosition = newPosition;\r\n      const positionDiff = newPosition - viewport.scrollPosition;\r\n      if (positionDiff > 0) {\r\n        forwardPadding.size += positionDiff;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n"]}