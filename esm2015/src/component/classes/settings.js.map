{"version":3,"file":"settings.js","sourceRoot":"","sources":["../../../package/src/component/classes/settings.ts"],"names":[],"mappings":";;;;AACA,OAAO,EAAE,cAAc,EAAE,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;;AAEnE,MAAM,OAAO,eAAe,GAAc;IACxC,OAAO,EAAE,KAAK;IACd,UAAU,EAAE,CAAC;IACb,QAAQ,EAAE,CAAC,QAAQ;IACnB,QAAQ,EAAE,QAAQ;IAClB,UAAU,EAAE,CAAC;IACb,OAAO,EAAE,GAAG;IACZ,QAAQ,EAAE,KAAK;IACf,UAAU,EAAE,KAAK;IACjB,cAAc,EAAE,KAAK;CACtB;;AAED,MAAM,OAAO,WAAW,GAAc;IACpC,QAAQ,EAAE,CAAC;IACX,UAAU,EAAE,CAAC;IACb,OAAO,EAAE,IAAI;CACd;;AAED,MAAM,OAAO,kBAAkB,GAAiB;IAC9C,KAAK,EAAE,KAAK;;IACZ,YAAY,EAAE,IAAI;;IAClB,OAAO,EAAE,KAAK;;IACd,QAAQ,EAAE,EAAE;;IACZ,OAAO,EAAE,KAAK;;IACd,kBAAkB,EAAE,GAAG;IACvB,kBAAkB,EAAE,EAAE;IACtB,SAAS,EAAE,CAAC;;IACZ,eAAe,EAAE,EAAE;;IACnB,mBAAmB,EAAE,GAAG,CAAC,mEAAmE;CAC7F;;AAED,MAAM,OAAO,cAAc,GAAiB;IAC1C,QAAQ,EAAE,CAAC;IACX,kBAAkB,EAAE,CAAC;IACrB,kBAAkB,EAAE,CAAC;IACrB,SAAS,EAAE,CAAC;IACZ,eAAe,EAAE,CAAC;IAClB,mBAAmB,EAAE,CAAC;CACvB;AAED,MAAM,OAAO,QAAQ;;;;;;IA8BnB,YACE,QAA+B,EAAE,WAAqC,EAAE,aAAqB;QAE7F,cAAc,CAAC,IAAI,EAAE,QAAQ,IAAI,EAAE,EAAE,eAAe,EAAE,WAAW,CAAC,CAAC;QACnE,iBAAiB,CAAC,IAAI,EAAE,WAAW,IAAI,EAAE,EAAE,kBAAkB,EAAE,cAAc,CAAC,CAAC;QAC/E,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACjD,uEAAuE;IACzE,CAAC;;;;IAED,kBAAkB;;YACZ,MAAM,GAAG,CAAC;QACd,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,eAAe,IAAI,CAAC,CAAC,mBAAmB,IAAI,OAAO,CAAC,EAAE;YACpF,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC;SAC/B;QACD,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE;YACtB,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;SAC3C;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;;;IA/CC,2BAAiB;;IACjB,8BAAmB;;IACnB,4BAAiB;;IACjB,4BAAiB;;IACjB,4BAAiB;;IACjB,8BAAmB;;IACnB,2BAAgB;;IAChB,4BAAkB;;IAClB,8BAAoB;;IACpB,kCAAwB;;IAGxB,yBAAe;;IACf,gCAAsB;;IACtB,2BAAiB;;IACjB,4BAAiB;;IACjB,2BAAiB;;IACjB,sCAA2B;;IAC3B,sCAA2B;;IAC3B,6BAAkB;;IAClB,mCAAwB;;IACxB,uCAA4B;;IAG5B,iCAAsB;;IACtB,mCAAwB","sourcesContent":["import { Settings as ISettings, DevSettings as IDevSettings } from '../interfaces/index';\nimport { assignSettings, assignDevSettings } from '../utils/index';\n\nexport const defaultSettings: ISettings = {\n  adapter: false,\n  startIndex: 1,\n  minIndex: -Infinity,\n  maxIndex: Infinity,\n  bufferSize: 5,\n  padding: 0.5,\n  infinite: false,\n  horizontal: false,\n  windowViewport: false\n};\n\nexport const minSettings: ISettings = {\n  itemSize: 1,\n  bufferSize: 1,\n  padding: 0.01\n};\n\nexport const defaultDevSettings: IDevSettings = {\n  debug: false, // if true, logging is enabled; need to turn off when release\n  immediateLog: true, // if false, logging is not immediate and could be done via Workflow.logForce call\n  logTime: false, // if true, time differences are being logged\n  throttle: 40, // if > 0, scroll event handling is throttled (ms)\n  inertia: false, // if true, inertia scroll delay (ms) and delta (px) are taken into the account\n  inertiaScrollDelay: 125,\n  inertiaScrollDelta: 35,\n  initDelay: 1, // if set, the Workflow initialization will be postponed (ms)\n  initWindowDelay: 40, // if set and the entire window is scrollable, the Workflow init will be postponed (ms)\n  maxSynthScrollDelay: 450 // if > 0, synthetic scroll params will be reset after [value] (ms)\n};\n\nexport const minDevSettings: IDevSettings = {\n  throttle: 0,\n  inertiaScrollDelay: 0,\n  inertiaScrollDelta: 0,\n  initDelay: 0,\n  initWindowDelay: 0,\n  maxSynthScrollDelay: 0\n};\n\nexport class Settings implements ISettings {\n\n  // user settings\n  adapter: boolean;\n  startIndex: number;\n  minIndex: number;\n  maxIndex: number;\n  itemSize: number;\n  bufferSize: number;\n  padding: number;\n  infinite: boolean;\n  horizontal: boolean;\n  windowViewport: boolean;\n\n  // development settings\n  debug: boolean;\n  immediateLog: boolean;\n  logTime: boolean;\n  throttle: number;\n  inertia: boolean;\n  inertiaScrollDelay: number;\n  inertiaScrollDelta: number;\n  initDelay: number;\n  initWindowDelay: number;\n  maxSynthScrollDelay: number;\n\n  // internal settings, managed by scroller itself\n  instanceIndex: number;\n  initializeDelay: number;\n\n  constructor(\n    settings: ISettings | undefined, devSettings: IDevSettings | undefined, instanceIndex: number\n  ) {\n    assignSettings(this, settings || {}, defaultSettings, minSettings);\n    assignDevSettings(this, devSettings || {}, defaultDevSettings, minDevSettings);\n    this.instanceIndex = instanceIndex;\n    this.initializeDelay = this.getInitializeDelay();\n    // todo: min/max indexes must be ignored if infinite mode is enabled ??\n  }\n\n  getInitializeDelay(): number {\n    let result = 0;\n    if (this.windowViewport && this.initWindowDelay && !('scrollRestoration' in history)) {\n      result = this.initWindowDelay;\n    }\n    if (this.initDelay > 0) {\n      result = Math.max(result, this.initDelay);\n    }\n    return result;\n  }\n}\n"]}