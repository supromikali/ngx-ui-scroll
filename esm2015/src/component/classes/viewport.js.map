{"version":3,"file":"viewport.js","sourceRoot":"","sources":["../../../package/src/component/classes/viewport.ts"],"names":[],"mappings":"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","sourcesContent":["import { ElementRef } from '@angular/core';\n\nimport { Direction } from '../interfaces/index';\nimport { Paddings } from './paddings';\nimport { Settings } from './settings';\nimport { Routines } from './domRoutines';\nimport { State } from './state';\nimport { Logger } from './logger';\n\nexport class Viewport {\n\n  paddings: Paddings;\n  startDelta: number;\n\n  readonly element: HTMLElement;\n  readonly host: HTMLElement;\n  readonly scrollEventElement: HTMLElement | Document;\n  readonly scrollable: HTMLElement;\n  readonly settings: Settings;\n  readonly routines: Routines;\n  readonly state: State;\n  readonly logger: Logger;\n\n  constructor(elementRef: ElementRef, settings: Settings, routines: Routines, state: State, logger: Logger) {\n    this.settings = settings;\n    this.routines = routines;\n    this.state = state;\n    this.logger = logger;\n    this.element = elementRef.nativeElement;\n\n    if (settings.windowViewport) {\n      this.host = (<Document>this.element.ownerDocument).body;\n      this.scrollEventElement = <Document>(this.element.ownerDocument);\n      this.scrollable = <HTMLElement>this.scrollEventElement.scrollingElement;\n    } else {\n      this.host = <HTMLElement>this.element.parentElement;\n      this.scrollEventElement = this.host;\n      this.scrollable = <HTMLElement>this.element.parentElement;\n    }\n\n    this.paddings = new Paddings(this.element, this.routines, settings);\n\n    if (settings.windowViewport && 'scrollRestoration' in history) {\n      history.scrollRestoration = 'manual';\n    }\n  }\n\n  reset(scrollPosition: number) {\n    let newPosition = 0;\n    this.paddings.reset(this.getSize(), this.state.startIndex);\n    const negativeSize = this.paddings.backward.size;\n    if (negativeSize) {\n      newPosition = negativeSize;\n      this.state.bwdPaddingAverageSizeItemsCount = negativeSize / this.settings.itemSize;\n    }\n    this.scrollPosition = newPosition;\n    this.state.scrollState.reset();\n    this.state.syntheticScroll.reset(scrollPosition !== newPosition ? newPosition : null);\n    this.startDelta = 0;\n  }\n\n  setPosition(value: number, oldPosition?: number): number {\n    if (oldPosition === undefined) {\n      oldPosition = this.scrollPosition;\n    }\n    if (oldPosition === value) {\n      this.logger.log(() => ['setting scroll position at', value, '[cancelled]']);\n      return value;\n    }\n    this.routines.setScrollPosition(this.scrollable, value);\n    const position = this.scrollPosition;\n    this.logger.log(() => ['setting scroll position at', position]);\n    return position;\n  }\n\n  get scrollPosition(): number {\n    return this.routines.getScrollPosition(this.scrollable);\n  }\n\n  set scrollPosition(value: number) {\n    const oldPosition = this.scrollPosition;\n    const newPosition = this.setPosition(value, oldPosition);\n    const synthState = this.state.syntheticScroll;\n    synthState.time = Number(Date.now());\n    synthState.position = newPosition;\n    synthState.delta = newPosition - oldPosition;\n    if (synthState.positionBefore === null) {\n      // syntheticScroll.positionBefore should be set once per cycle\n      synthState.positionBefore = oldPosition;\n    }\n  }\n\n  getSize(): number {\n    return this.routines.getSize(this.host);\n  }\n\n  getScrollableSize(): number {\n    return this.routines.getSize(this.element);\n  }\n\n  getBufferPadding(): number {\n    return this.getSize() * this.settings.padding;\n  }\n\n  getEdge(direction: Direction, opposite?: boolean): number {\n    return this.routines.getEdge(this.host, direction, opposite);\n  }\n\n  getElementEdge(element: HTMLElement, direction: Direction, opposite?: boolean): number {\n    return this.routines.getEdge(element, direction, opposite);\n  }\n\n  getOffset(): number {\n    return this.routines.getOffset(this.element);\n  }\n\n}\n"]}