{"version":3,"file":"cache.js","sourceRoot":"","sources":["../../../package/src/component/classes/cache.ts"],"names":[],"mappings":"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","sourcesContent":["import { Item } from './item';\nimport { Settings } from '../classes/settings';\nimport { Logger } from './logger';\n\nexport class ItemCache {\n  $index: number;\n  nodeId: string;\n  data: any; // todo: cache data only if it is permitted by settings\n  size: number;\n  position: number;\n\n  constructor(item: Item) {\n    this.$index = item.$index;\n    this.nodeId = item.nodeId;\n    this.data = item.data;\n    this.size = item.size;\n  }\n}\n\nexport class RecalculateAverage {\n  newItems: Array<number>;\n  oldItems: Array<number>;\n\n  constructor() {\n    this.reset();\n  }\n\n  reset() {\n    this.newItems = [];\n    this.oldItems = [];\n  }\n}\n\nexport class Cache {\n  averageSizeFloat: number;\n  averageSize: number;\n  minIndex: number;\n  maxIndex: number;\n  recalculateAverage: RecalculateAverage;\n\n  private items: Map<number, ItemCache>;\n  readonly logger: Logger;\n  readonly itemSize: number;\n\n  constructor(itemSize: number, logger: Logger) {\n    this.averageSizeFloat = itemSize;\n    this.averageSize = itemSize;\n    this.itemSize = itemSize;\n    this.items = new Map<number, ItemCache>();\n    this.recalculateAverage = new RecalculateAverage();\n    this.reset();\n    this.logger = logger;\n  }\n\n  reset() {\n    this.minIndex = +Infinity;\n    this.maxIndex = -Infinity;\n    this.items.clear();\n    this.averageSizeFloat = this.itemSize;\n    this.averageSize = this.itemSize;\n    this.recalculateAverage.reset();\n  }\n\n  recalculateAverageSize() {\n    const { oldItems: { length: oldItemsLength }, newItems: { length: newItemsLength } } = this.recalculateAverage;\n    if (!oldItemsLength && !newItemsLength) {\n      return;\n    }\n    const oldItemsSize = this.recalculateAverage.oldItems.reduce((acc, index) => acc + this.getItemSize(index), 0);\n    const newItemsSize = this.recalculateAverage.newItems.reduce((acc, index) => acc + this.getItemSize(index), 0);\n    if (oldItemsLength) {\n      const averageSize = this.averageSizeFloat || 0;\n      const averageSizeLength = this.items.size - newItemsLength - oldItemsLength;\n      this.averageSizeFloat = (averageSizeLength * averageSize + oldItemsSize) / averageSizeLength;\n    }\n    if (newItemsLength) {\n      const averageSize = this.averageSizeFloat || 0;\n      const averageSizeLength = this.items.size - newItemsLength;\n      this.averageSizeFloat = (averageSizeLength * averageSize + newItemsSize) / this.items.size;\n    }\n    this.averageSize = Math.round(this.averageSizeFloat);\n    this.recalculateAverage.reset();\n    this.logger.log(() => `average size has been updated: ${this.averageSize}`);\n  }\n\n  add(item: Item): ItemCache {\n    let itemCache = this.get(item.$index);\n    if (itemCache) {\n      itemCache.data = item.data;\n      if (itemCache.size !== item.size) {\n        itemCache.size = item.size;\n        this.recalculateAverage.oldItems.push(item.$index);\n      }\n    } else {\n      itemCache = new ItemCache(item);\n      this.items.set(item.$index, itemCache);\n      if (this.averageSize !== itemCache.size) {\n        this.recalculateAverage.newItems.push(item.$index);\n      }\n    }\n    if (item.$index < this.minIndex) {\n      this.minIndex = item.$index;\n    }\n    if (item.$index > this.maxIndex) {\n      this.maxIndex = item.$index;\n    }\n    return itemCache;\n  }\n\n  getItemSize(index: number): number {\n    const item = this.get(index);\n    return item ? item.size : 0;\n  }\n\n  get(index: number): ItemCache | undefined {\n    return this.items.get(index);\n  }\n}\n"]}