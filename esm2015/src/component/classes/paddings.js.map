{"version":3,"file":"paddings.js","sourceRoot":"","sources":["../../../package/src/component/classes/paddings.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AAIpD,MAAM,OAAO,OAAO;;;;;;IAMlB,YAAY,OAAoB,EAAE,SAAoB,EAAE,QAAkB;QACxE,IAAI,CAAC,OAAO,GAAG,mBAAa,OAAO,CAAC,aAAa,CAAC,iBAAiB,SAAS,GAAG,CAAC,EAAA,CAAC;QACjF,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;;;;;IAED,KAAK,CAAC,IAAa;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC;IACxB,CAAC;;;;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAClD,CAAC;;;;;IAED,IAAI,IAAI,CAAC,KAAa;QACpB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IAC9D,CAAC;CAEF;;;IAtBC,0BAAqB;;IACrB,4BAAqB;;IACrB,2BAAmB;;AAsBrB,MAAM,OAAO,QAAQ;;;;;;IAKnB,YAAY,OAAoB,EAAE,QAAkB,EAAE,QAAkB;QACtE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QACjE,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACrE,CAAC;;;;;;IAED,KAAK,CAAC,YAAoB,EAAE,UAAkB;QAC5C,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC,CAAC;QACnE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC;IACxD,CAAC;;;;;;IAED,eAAe,CAAC,UAAkB,EAAE,YAAoB;cAChD,EAAE,QAAQ,EAAE,GAAG,IAAI;;YACrB,YAAY,GAAG,YAAY;QAC/B,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YAC/B,YAAY,GAAG,CAAC,QAAQ,CAAC,QAAQ,GAAG,UAAU,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC;SACzE;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;;;;;IAED,eAAe,CAAC,UAAkB;cAC1B,EAAE,QAAQ,EAAE,GAAG,IAAI;;YACrB,YAAY,GAAG,CAAC;QACpB,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YAC/B,YAAY,GAAG,CAAC,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC;SACrE;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;CACF;;;IAhCC,4BAAmB;;IACnB,2BAAiB;;IACjB,4BAAkB","sourcesContent":["import { Direction } from '../interfaces/direction';\r\nimport { Routines } from './domRoutines';\r\nimport { Settings } from './settings';\r\n\r\nexport class Padding {\r\n\r\n  element: HTMLElement;\r\n  direction: Direction;\r\n  routines: Routines;\r\n\r\n  constructor(element: HTMLElement, direction: Direction, routines: Routines) {\r\n    this.element = <HTMLElement>element.querySelector(`[data-padding-${direction}]`);\r\n    this.direction = direction;\r\n    this.routines = routines;\r\n  }\r\n\r\n  reset(size?: number) {\r\n    this.size = size || 0;\r\n  }\r\n\r\n  get size(): number {\r\n    return this.routines.getSizeStyle(this.element);\r\n  }\r\n\r\n  set size(value: number) {\r\n    this.routines.setSizeStyle(this.element, Math.round(value));\r\n  }\r\n\r\n}\r\n\r\nexport class Paddings {\r\n  settings: Settings;\r\n  forward: Padding;\r\n  backward: Padding;\r\n\r\n  constructor(element: HTMLElement, routines: Routines, settings: Settings) {\r\n    this.settings = settings;\r\n    this.forward = new Padding(element, Direction.forward, routines);\r\n    this.backward = new Padding(element, Direction.backward, routines);\r\n  }\r\n\r\n  reset(viewportSize: number, startIndex: number) {\r\n    this.forward.reset(this.getPositiveSize(startIndex, viewportSize));\r\n    this.backward.reset(this.getNegativeSize(startIndex));\r\n  }\r\n\r\n  getPositiveSize(startIndex: number, viewportSize: number) {\r\n    const { settings } = this;\r\n    let positiveSize = viewportSize;\r\n    if (isFinite(settings.maxIndex)) {\r\n      positiveSize = (settings.maxIndex - startIndex + 1) * settings.itemSize;\r\n    }\r\n    return positiveSize;\r\n  }\r\n\r\n  getNegativeSize(startIndex: number) {\r\n    const { settings } = this;\r\n    let negativeSize = 0;\r\n    if (isFinite(settings.minIndex)) {\r\n      negativeSize = (startIndex - settings.minIndex) * settings.itemSize;\r\n    }\r\n    return negativeSize;\r\n  }\r\n}\r\n"]}