{"version":3,"file":"ui-scroll.directive.js","sourceRoot":"","sources":["../package/src/ui-scroll.directive.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,WAAW,EAAE,gBAAgB,EAAE,wBAAwB,EAAU,MAAM,eAAe,CAAC;AAElH,OAAO,OAAO,MAAM,qBAAqB,CAAC;AAC1C,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAI1D,MAAM,OAAO,iBAAiB;;;;;;IAI5B,YACU,WAA6B,EAC7B,aAA+B,EAC/B,QAAkC;QAFlC,gBAAW,GAAX,WAAW,CAAkB;QAC7B,kBAAa,GAAb,aAAa,CAAkB;QAC/B,aAAQ,GAAR,QAAQ,CAA0B;IAE5C,CAAC;;;;;IAED,IAAa,UAAU,CAAC,UAAsB;QAC5C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;;;;IAED,QAAQ;;cACA,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,EAAE,CAAC;;cACtD,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC,iBAAiB,CAAC;;cACtE,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,eAAe,CACrD,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,CAC9E;QACD,YAAY,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACnD,YAAY,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;QAClD,YAAY,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;IAC1C,CAAC;;;YAzBF,SAAS,SAAC,EAAE,QAAQ,EAAE,wBAAwB,EAAE;;;;YANtB,WAAW;YAAE,gBAAgB;YAAE,wBAAwB;;;yBAkB/E,KAAK;;;;IAVN,oCAAwB;;IACxB,uCAA+B;;IAG7B,wCAAqC;;IACrC,0CAAuC;;IACvC,qCAA0C","sourcesContent":["import { Directive, Input, TemplateRef, ViewContainerRef, ComponentFactoryResolver, OnInit } from '@angular/core';\n\nimport version from './ui-scroll.version';\nimport { UiScrollComponent } from './ui-scroll.component';\nimport { Datasource } from './component/interfaces/datasource';\n\n@Directive({ selector: '[uiScroll][uiScrollOf]' })\nexport class UiScrollDirective implements OnInit {\n  private version: string;\n  private datasource: Datasource;\n\n  constructor(\n    private templateRef: TemplateRef<any>,\n    private viewContainer: ViewContainerRef,\n    private resolver: ComponentFactoryResolver\n  ) {\n  }\n\n  @Input() set uiScrollOf(datasource: Datasource) {\n    this.datasource = datasource;\n  }\n\n  ngOnInit() {\n    const templateView = this.templateRef.createEmbeddedView({});\n    const compFactory = this.resolver.resolveComponentFactory(UiScrollComponent);\n    const componentRef = this.viewContainer.createComponent(\n      compFactory, undefined, this.viewContainer.injector, [templateView.rootNodes]\n    );\n    componentRef.instance.datasource = this.datasource;\n    componentRef.instance.template = this.templateRef;\n    componentRef.instance.version = version;\n  }\n}\n"]}